/*********************************************************************************************
* Fichero:		timer.c
* Autor:
* Descrip:		funciones de control del timer0 del s3c44b0x
* Version:
*********************************************************************************************/

/*--- ficheros de cabecera ---*/
#include "timer.h"
#include "44b.h"
#include "44blib.h"
#include "debug_stack.h"
#include "jugada_por_pantalla.h"
#include "pantalla_reversi.h"
/*--- variables globales ---*/

/* declaración de función que es rutina de servicio de interrupción
 * https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html */
void timer_ISR(void) __attribute__((interrupt("IRQ")));

int timer0_num_int;
/*--- codigo de las funciones ---*/
void timer_ISR(void)
{
	timer0_num_int++;
	Latido_ev_new_tick();
	if(timer0_num_int % 60 == 0 && estado_jugada_pantalla == PANTALLA_SELECCION){
			push_debug(EVENTO_SEGUNDO, 1);
		}
	realizar_trabajo_encolado();
	/* borrar bit en I_ISPC para desactivar la solicitud de interrupción*/
	rI_ISPC |= BIT_TIMER0; // BIT_TIMER0 está definido en 44b.h y pone un uno en el bit 13 que correponde al Timer0
}

void timer_init(void)
{
	timer0_num_int = 0;
	/* Configuraion controlador de interrupciones */
	rINTMSK &= ~(BIT_TIMER0); 	// habilitamos en vector de mascaras de interrupcion el Timer0 (bits 26 y 13, BIT_GLOBAL y BIT_TIMER0 están definidos en 44b.h)

	/* Establece la rutina de servicio para TIMER0 */
	pISR_TIMER0 = (unsigned) timer_ISR;

	/* Configura el Timer0 */
	rTCFG0 &= ~ 0xFF; 		// ajusta el preescalado
	rTCFG1 &= ~ 0xF;  		// |
	rTCFG1 |= 0x4;			// | Ultimos 4 bits (1/2 -> 0) (1/4 -> 1) (1/8 -> 2) (1/16 -> 3) (1/32 -> 4).
	rTCNTB0 = 33333;		// valor inicial de cuenta (la cuenta es descendente)
	rTCMPB0 = 0;			// valor de comparación
	
	/* establecer update=manual (bit 1) + inverter=on (¿? será inverter off un cero en el bit 2 pone el inverter en off)*/
	rTCON &= ~ 0xF;
	rTCON |= 0x2;
	
	/* iniciar timer (bit 0) con auto-reload (bit 3)*/
	rTCON &= ~ 0xF;
	rTCON |= 0x9;
}

