   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"Bmp.c"
  21              	.Ltext0:
  22              		.file 1 "../Bmp.c"
 1210              		.align	2
 1213              	ucMouseMap:
 1214 0000 0F       		.byte	15
 1215 0001 FF       		.byte	-1
 1216 0002 FF       		.byte	-1
 1217 0003 FF       		.byte	-1
 1218 0004 FF       		.byte	-1
 1219 0005 FF       		.byte	-1
 1220 0006 FF       		.byte	-1
 1221 0007 FF       		.byte	-1
 1222 0008 FF       		.byte	-1
 1223 0009 FF       		.byte	-1
 1224 000a FF       		.byte	-1
 1225 000b FF       		.byte	-1
 1226 000c 0F       		.byte	15
 1227 000d 0F       		.byte	15
 1228 000e FF       		.byte	-1
 1229 000f FF       		.byte	-1
 1230 0010 FF       		.byte	-1
 1231 0011 FF       		.byte	-1
 1232 0012 FF       		.byte	-1
 1233 0013 FF       		.byte	-1
 1234 0014 FF       		.byte	-1
 1235 0015 FF       		.byte	-1
 1236 0016 FF       		.byte	-1
 1237 0017 FF       		.byte	-1
 1238 0018 0F       		.byte	15
 1239 0019 00       		.byte	0
 1240 001a 0F       		.byte	15
 1241 001b FF       		.byte	-1
 1242 001c FF       		.byte	-1
 1243 001d FF       		.byte	-1
 1244 001e FF       		.byte	-1
 1245 001f FF       		.byte	-1
 1246 0020 FF       		.byte	-1
 1247 0021 FF       		.byte	-1
 1248 0022 FF       		.byte	-1
 1249 0023 FF       		.byte	-1
 1250 0024 0F       		.byte	15
 1251 0025 00       		.byte	0
 1252 0026 00       		.byte	0
 1253 0027 0F       		.byte	15
 1254 0028 FF       		.byte	-1
 1255 0029 FF       		.byte	-1
 1256 002a FF       		.byte	-1
 1257 002b FF       		.byte	-1
 1258 002c FF       		.byte	-1
 1259 002d FF       		.byte	-1
 1260 002e FF       		.byte	-1
 1261 002f FF       		.byte	-1
 1262 0030 0F       		.byte	15
 1263 0031 00       		.byte	0
 1264 0032 00       		.byte	0
 1265 0033 00       		.byte	0
 1266 0034 0F       		.byte	15
 1267 0035 FF       		.byte	-1
 1268 0036 FF       		.byte	-1
 1269 0037 FF       		.byte	-1
 1270 0038 FF       		.byte	-1
 1271 0039 FF       		.byte	-1
 1272 003a FF       		.byte	-1
 1273 003b FF       		.byte	-1
 1274 003c 0F       		.byte	15
 1275 003d 00       		.byte	0
 1276 003e 00       		.byte	0
 1277 003f 00       		.byte	0
 1278 0040 00       		.byte	0
 1279 0041 0F       		.byte	15
 1280 0042 FF       		.byte	-1
 1281 0043 FF       		.byte	-1
 1282 0044 FF       		.byte	-1
 1283 0045 FF       		.byte	-1
 1284 0046 FF       		.byte	-1
 1285 0047 FF       		.byte	-1
 1286 0048 0F       		.byte	15
 1287 0049 00       		.byte	0
 1288 004a 00       		.byte	0
 1289 004b 00       		.byte	0
 1290 004c 00       		.byte	0
 1291 004d 00       		.byte	0
 1292 004e 0F       		.byte	15
 1293 004f FF       		.byte	-1
 1294 0050 FF       		.byte	-1
 1295 0051 FF       		.byte	-1
 1296 0052 FF       		.byte	-1
 1297 0053 FF       		.byte	-1
 1298 0054 0F       		.byte	15
 1299 0055 00       		.byte	0
 1300 0056 00       		.byte	0
 1301 0057 00       		.byte	0
 1302 0058 00       		.byte	0
 1303 0059 00       		.byte	0
 1304 005a 00       		.byte	0
 1305 005b 0F       		.byte	15
 1306 005c FF       		.byte	-1
 1307 005d FF       		.byte	-1
 1308 005e FF       		.byte	-1
 1309 005f FF       		.byte	-1
 1310 0060 0F       		.byte	15
 1311 0061 00       		.byte	0
 1312 0062 00       		.byte	0
 1313 0063 00       		.byte	0
 1314 0064 00       		.byte	0
 1315 0065 00       		.byte	0
 1316 0066 00       		.byte	0
 1317 0067 00       		.byte	0
 1318 0068 0F       		.byte	15
 1319 0069 FF       		.byte	-1
 1320 006a FF       		.byte	-1
 1321 006b FF       		.byte	-1
 1322 006c 0F       		.byte	15
 1323 006d 00       		.byte	0
 1324 006e 00       		.byte	0
 1325 006f 00       		.byte	0
 1326 0070 00       		.byte	0
 1327 0071 00       		.byte	0
 1328 0072 00       		.byte	0
 1329 0073 00       		.byte	0
 1330 0074 00       		.byte	0
 1331 0075 0F       		.byte	15
 1332 0076 FF       		.byte	-1
 1333 0077 FF       		.byte	-1
 1334 0078 0F       		.byte	15
 1335 0079 00       		.byte	0
 1336 007a 00       		.byte	0
 1337 007b 00       		.byte	0
 1338 007c 00       		.byte	0
 1339 007d 00       		.byte	0
 1340 007e 00       		.byte	0
 1341 007f 00       		.byte	0
 1342 0080 00       		.byte	0
 1343 0081 00       		.byte	0
 1344 0082 0F       		.byte	15
 1345 0083 FF       		.byte	-1
 1346 0084 0F       		.byte	15
 1347 0085 00       		.byte	0
 1348 0086 00       		.byte	0
 1349 0087 00       		.byte	0
 1350 0088 00       		.byte	0
 1351 0089 00       		.byte	0
 1352 008a 00       		.byte	0
 1353 008b 0F       		.byte	15
 1354 008c 0F       		.byte	15
 1355 008d 0F       		.byte	15
 1356 008e 0F       		.byte	15
 1357 008f 0F       		.byte	15
 1358 0090 0F       		.byte	15
 1359 0091 00       		.byte	0
 1360 0092 00       		.byte	0
 1361 0093 0F       		.byte	15
 1362 0094 00       		.byte	0
 1363 0095 00       		.byte	0
 1364 0096 00       		.byte	0
 1365 0097 0F       		.byte	15
 1366 0098 FF       		.byte	-1
 1367 0099 FF       		.byte	-1
 1368 009a FF       		.byte	-1
 1369 009b FF       		.byte	-1
 1370 009c 0F       		.byte	15
 1371 009d 00       		.byte	0
 1372 009e 0F       		.byte	15
 1373 009f FF       		.byte	-1
 1374 00a0 0F       		.byte	15
 1375 00a1 00       		.byte	0
 1376 00a2 00       		.byte	0
 1377 00a3 00       		.byte	0
 1378 00a4 0F       		.byte	15
 1379 00a5 FF       		.byte	-1
 1380 00a6 FF       		.byte	-1
 1381 00a7 FF       		.byte	-1
 1382 00a8 0F       		.byte	15
 1383 00a9 0F       		.byte	15
 1384 00aa FF       		.byte	-1
 1385 00ab FF       		.byte	-1
 1386 00ac 0F       		.byte	15
 1387 00ad 00       		.byte	0
 1388 00ae 00       		.byte	0
 1389 00af 00       		.byte	0
 1390 00b0 0F       		.byte	15
 1391 00b1 FF       		.byte	-1
 1392 00b2 FF       		.byte	-1
 1393 00b3 FF       		.byte	-1
 1394 00b4 0F       		.byte	15
 1395 00b5 FF       		.byte	-1
 1396 00b6 FF       		.byte	-1
 1397 00b7 FF       		.byte	-1
 1398 00b8 FF       		.byte	-1
 1399 00b9 0F       		.byte	15
 1400 00ba 00       		.byte	0
 1401 00bb 00       		.byte	0
 1402 00bc 00       		.byte	0
 1403 00bd 0F       		.byte	15
 1404 00be FF       		.byte	-1
 1405 00bf FF       		.byte	-1
 1406 00c0 FF       		.byte	-1
 1407 00c1 FF       		.byte	-1
 1408 00c2 FF       		.byte	-1
 1409 00c3 FF       		.byte	-1
 1410 00c4 FF       		.byte	-1
 1411 00c5 0F       		.byte	15
 1412 00c6 00       		.byte	0
 1413 00c7 00       		.byte	0
 1414 00c8 00       		.byte	0
 1415 00c9 0F       		.byte	15
 1416 00ca FF       		.byte	-1
 1417 00cb FF       		.byte	-1
 1418 00cc FF       		.byte	-1
 1419 00cd FF       		.byte	-1
 1420 00ce FF       		.byte	-1
 1421 00cf FF       		.byte	-1
 1422 00d0 FF       		.byte	-1
 1423 00d1 FF       		.byte	-1
 1424 00d2 0F       		.byte	15
 1425 00d3 00       		.byte	0
 1426 00d4 00       		.byte	0
 1427 00d5 00       		.byte	0
 1428 00d6 0F       		.byte	15
 1429 00d7 FF       		.byte	-1
 1430 00d8 FF       		.byte	-1
 1431 00d9 FF       		.byte	-1
 1432 00da FF       		.byte	-1
 1433 00db FF       		.byte	-1
 1434 00dc FF       		.byte	-1
 1435 00dd FF       		.byte	-1
 1436 00de 0F       		.byte	15
 1437 00df 00       		.byte	0
 1438 00e0 00       		.byte	0
 1439 00e1 00       		.byte	0
 1440 00e2 0F       		.byte	15
 1441 00e3 FF       		.byte	-1
 1442 00e4 FF       		.byte	-1
 1443 00e5 FF       		.byte	-1
 1444 00e6 FF       		.byte	-1
 1445 00e7 FF       		.byte	-1
 1446 00e8 FF       		.byte	-1
 1447 00e9 FF       		.byte	-1
 1448 00ea FF       		.byte	-1
 1449 00eb 0F       		.byte	15
 1450 00ec 0F       		.byte	15
 1451 00ed 0F       		.byte	15
 1452 00ee FF       		.byte	-1
 1453 00ef FF       		.byte	-1
 1454              		.global	Stru_Bitmap_gbMouse
 1455              		.data
 1456              		.align	2
 1459              	Stru_Bitmap_gbMouse:
 1460 0000 10       		.byte	16
 1461 0001 04       		.byte	4
 1462 0002 0C00     		.short	12
 1463 0004 1400     		.short	20
 1464 0006 0000     		.space	2
 1465 0008 FF000000 		.word	255
 1466 000c 00000000 		.word	ucMouseMap
 1467              		.comm	ulMouseX,2,2
 1468              		.comm	ulMouseY,2,2
 1469              		.comm	ucCursorBackUp,120,4
 1470              		.text
 1471              		.align	2
 1472              		.global	BitmapView
 1474              	BitmapView:
 1475              	.LFB0:
   1:../Bmp.c      **** /*********************************************************************************************
   2:../Bmp.c      **** * Fichero:	Bmp.c
   3:../Bmp.c      **** * Autor:	
   4:../Bmp.c      **** * Descrip:	Funciones de control y visualizacion del LCD
   5:../Bmp.c      **** * Version:	
   6:../Bmp.c      **** *********************************************************************************************/
   7:../Bmp.c      **** 
   8:../Bmp.c      **** /*--- Archivos cabecera ---*/
   9:../Bmp.c      **** #include "bmp.h"
  10:../Bmp.c      **** #include "def.h"
  11:../Bmp.c      **** #include "lcd.h"
  12:../Bmp.c      **** 
  13:../Bmp.c      **** /*--- variables globales ---*/
  14:../Bmp.c      **** /* mapa de bits del cursor del raton */
  15:../Bmp.c      **** const INT8U ucMouseMap[] = {
  16:../Bmp.c      **** BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  17:../Bmp.c      **** BLACK,        BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  18:../Bmp.c      **** BLACK,        WHITE,        BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  19:../Bmp.c      **** BLACK,        WHITE,        WHITE,        BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  20:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        BLACK,        TRANSPARENCY, TRANSPARENCY, T
  21:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        BLACK,        TRANSPARENCY, T
  22:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        BLACK,        T
  23:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        B
  24:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        W
  25:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        W
  26:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        W
  27:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        B
  28:../Bmp.c      **** BLACK,        WHITE,        WHITE,        BLACK,        WHITE,        WHITE,        WHITE,        B
  29:../Bmp.c      **** BLACK,        WHITE,        BLACK,        TRANSPARENCY, BLACK,        WHITE,        WHITE,        W
  30:../Bmp.c      **** BLACK,        BLACK,        TRANSPARENCY, TRANSPARENCY, BLACK,        WHITE,        WHITE,        W
  31:../Bmp.c      **** BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        WHITE,        W
  32:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        WHITE,        W
  33:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        W
  34:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        W
  35:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, B
  36:../Bmp.c      **** };
  37:../Bmp.c      **** 
  38:../Bmp.c      **** STRU_BITMAP Stru_Bitmap_gbMouse = {0x10, 4, 12, 20, TRANSPARENCY, (INT8U *)ucMouseMap};
  39:../Bmp.c      **** 
  40:../Bmp.c      **** INT16U ulMouseX;
  41:../Bmp.c      **** INT16U ulMouseY;
  42:../Bmp.c      **** INT8U ucCursorBackUp[20][12/2];
  43:../Bmp.c      **** 
  44:../Bmp.c      **** /*--- codigo de funcion ---*/
  45:../Bmp.c      **** /*********************************************************************************************
  46:../Bmp.c      **** * name:		BitmapView()
  47:../Bmp.c      **** * func:		display bitmap
  48:../Bmp.c      **** * para:		x,y -- pot's X-Y coordinate 
  49:../Bmp.c      **** *			Stru_Bitmap -- bitmap struct
  50:../Bmp.c      **** * ret:		none
  51:../Bmp.c      **** * modify:
  52:../Bmp.c      **** * comment:		
  53:../Bmp.c      **** *********************************************************************************************/
  54:../Bmp.c      **** void BitmapView (INT16U x, INT16U y, STRU_BITMAP Stru_Bitmap)
  55:../Bmp.c      **** {
 1476              		.loc 1 55 0
 1477              		.cfi_startproc
 1478              		@ Function supports interworking.
 1479              		@ args = 16, pretend = 8, frame = 24
 1480              		@ frame_needed = 1, uses_anonymous_args = 0
 1481 0000 0DC0A0E1 		mov	ip, sp
 1482              	.LCFI0:
 1483              		.cfi_def_cfa_register 12
 1484 0004 08D04DE2 		sub	sp, sp, #8
 1485 0008 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1486 000c 0CB04CE2 		sub	fp, ip, #12
 1487              		.cfi_offset 14, -16
 1488              		.cfi_offset 13, -20
 1489              		.cfi_offset 11, -24
 1490              	.LCFI1:
 1491              		.cfi_def_cfa 11, 12
 1492 0010 18D04DE2 		sub	sp, sp, #24
 1493 0014 04C08BE2 		add	ip, fp, #4
 1494 0018 0C008CE8 		stmia	ip, {r2, r3}
 1495 001c BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 1496 0020 B0124BE1 		strh	r1, [fp, #-32]	@ movhi
  56:../Bmp.c      **** 	INT32U i, j;
  57:../Bmp.c      **** 	INT8U ucColor;
  58:../Bmp.c      **** 	
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1497              		.loc 1 59 0
 1498 0024 0030A0E3 		mov	r3, #0
 1499 0028 10300BE5 		str	r3, [fp, #-16]
 1500 002c 4E0000EA 		b	.L2
 1501              	.L6:
  60:../Bmp.c      **** 	{
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1502              		.loc 1 61 0
 1503 0030 0030A0E3 		mov	r3, #0
 1504 0034 14300BE5 		str	r3, [fp, #-20]
 1505 0038 430000EA 		b	.L3
 1506              	.L5:
  62:../Bmp.c      **** 		{
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1507              		.loc 1 63 0
 1508 003c 10209BE5 		ldr	r2, [fp, #16]
 1509 0040 B630DBE1 		ldrh	r3, [fp, #6]
 1510 0044 10101BE5 		ldr	r1, [fp, #-16]
 1511 0048 930101E0 		mul	r1, r3, r1
 1512 004c 14301BE5 		ldr	r3, [fp, #-20]
 1513 0050 033081E0 		add	r3, r1, r3
 1514 0054 033082E0 		add	r3, r2, r3
 1515 0058 0030D3E5 		ldrb	r3, [r3, #0]
 1516 005c 15304BE5 		strb	r3, [fp, #-21]
 1517 0060 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 1518 0064 FF0053E3 		cmp	r3, #255
 1519 0068 3400000A 		beq	.L4
  64:../Bmp.c      **** 			{
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 1520              		.loc 1 65 0
 1521 006c B0225BE1 		ldrh	r2, [fp, #-32]
 1522 0070 10301BE5 		ldr	r3, [fp, #-16]
 1523 0074 032082E0 		add	r2, r2, r3
 1524 0078 0230A0E1 		mov	r3, r2
 1525 007c 0331A0E1 		mov	r3, r3, asl #2
 1526 0080 023083E0 		add	r3, r3, r2
 1527 0084 0333A0E1 		mov	r3, r3, asl #6
 1528 0088 A320A0E1 		mov	r2, r3, lsr #1
 1529 008c BE115BE1 		ldrh	r1, [fp, #-30]
 1530 0090 14301BE5 		ldr	r3, [fp, #-20]
 1531 0094 033081E0 		add	r3, r1, r3
 1532 0098 A331A0E1 		mov	r3, r3, lsr #3
 1533 009c 0331A0E1 		mov	r3, r3, asl #2
 1534 00a0 033082E0 		add	r3, r2, r3
 1535 00a4 C33683E2 		add	r3, r3, #204472320
 1536 00a8 963C83E2 		add	r3, r3, #38400
 1537 00ac 0310A0E1 		mov	r1, r3
 1538 00b0 B0225BE1 		ldrh	r2, [fp, #-32]
 1539 00b4 10301BE5 		ldr	r3, [fp, #-16]
 1540 00b8 032082E0 		add	r2, r2, r3
 1541 00bc 0230A0E1 		mov	r3, r2
 1542 00c0 0331A0E1 		mov	r3, r3, asl #2
 1543 00c4 023083E0 		add	r3, r3, r2
 1544 00c8 0333A0E1 		mov	r3, r3, asl #6
 1545 00cc A320A0E1 		mov	r2, r3, lsr #1
 1546 00d0 BE015BE1 		ldrh	r0, [fp, #-30]
 1547 00d4 14301BE5 		ldr	r3, [fp, #-20]
 1548 00d8 033080E0 		add	r3, r0, r3
 1549 00dc A331A0E1 		mov	r3, r3, lsr #3
 1550 00e0 0331A0E1 		mov	r3, r3, asl #2
 1551 00e4 033082E0 		add	r3, r2, r3
 1552 00e8 C33683E2 		add	r3, r3, #204472320
 1553 00ec 963C83E2 		add	r3, r3, #38400
 1554 00f0 002093E5 		ldr	r2, [r3, #0]
 1555 00f4 BE015BE1 		ldrh	r0, [fp, #-30]
 1556 00f8 14301BE5 		ldr	r3, [fp, #-20]
 1557 00fc 033080E0 		add	r3, r0, r3
 1558 0100 073003E2 		and	r3, r3, #7
 1559 0104 0331A0E1 		mov	r3, r3, asl #2
 1560 0108 0F02A0E3 		mov	r0, #-268435456
 1561 010c 3033A0E1 		mov	r3, r0, lsr r3
 1562 0110 0330E0E1 		mvn	r3, r3
 1563 0114 032002E0 		and	r2, r2, r3
 1564 0118 15005BE5 		ldrb	r0, [fp, #-21]	@ zero_extendqisi2
 1565 011c BEC15BE1 		ldrh	ip, [fp, #-30]
 1566 0120 14301BE5 		ldr	r3, [fp, #-20]
 1567 0124 03308CE0 		add	r3, ip, r3
 1568 0128 0330E0E1 		mvn	r3, r3
 1569 012c 073003E2 		and	r3, r3, #7
 1570 0130 0331A0E1 		mov	r3, r3, asl #2
 1571 0134 1033A0E1 		mov	r3, r0, asl r3
 1572 0138 033082E1 		orr	r3, r2, r3
 1573 013c 003081E5 		str	r3, [r1, #0]
 1574              	.L4:
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1575              		.loc 1 61 0
 1576 0140 14301BE5 		ldr	r3, [fp, #-20]
 1577 0144 013083E2 		add	r3, r3, #1
 1578 0148 14300BE5 		str	r3, [fp, #-20]
 1579              	.L3:
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1580              		.loc 1 61 0 is_stmt 0 discriminator 1
 1581 014c B630DBE1 		ldrh	r3, [fp, #6]
 1582 0150 0320A0E1 		mov	r2, r3
 1583 0154 14301BE5 		ldr	r3, [fp, #-20]
 1584 0158 030052E1 		cmp	r2, r3
 1585 015c B6FFFF8A 		bhi	.L5
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1586              		.loc 1 59 0 is_stmt 1
 1587 0160 10301BE5 		ldr	r3, [fp, #-16]
 1588 0164 013083E2 		add	r3, r3, #1
 1589 0168 10300BE5 		str	r3, [fp, #-16]
 1590              	.L2:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1591              		.loc 1 59 0 is_stmt 0 discriminator 1
 1592 016c B830DBE1 		ldrh	r3, [fp, #8]
 1593 0170 0320A0E1 		mov	r2, r3
 1594 0174 10301BE5 		ldr	r3, [fp, #-16]
 1595 0178 030052E1 		cmp	r2, r3
 1596 017c ABFFFF8A 		bhi	.L6
  66:../Bmp.c      **** 			}
  67:../Bmp.c      **** 		}
  68:../Bmp.c      **** 	}
  69:../Bmp.c      **** }
 1597              		.loc 1 69 0 is_stmt 1
 1598 0180 0CD04BE2 		sub	sp, fp, #12
 1599 0184 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1600 0188 1EFF2FE1 		bx	lr
 1601              		.cfi_endproc
 1602              	.LFE0:
 1604              		.align	2
 1605              		.global	BitmapPush
 1607              	BitmapPush:
 1608              	.LFB1:
  70:../Bmp.c      **** 
  71:../Bmp.c      **** /*********************************************************************************************
  72:../Bmp.c      **** * name:		BitmapPush()
  73:../Bmp.c      **** * func:		push bitmap data into LCD active buffer
  74:../Bmp.c      **** * para:		x,y -- pot's X-Y coordinate 
  75:../Bmp.c      **** *			Stru_Bitmap -- bitmap struct
  76:../Bmp.c      **** * ret:		none
  77:../Bmp.c      **** * modify:
  78:../Bmp.c      **** * comment:		
  79:../Bmp.c      **** *********************************************************************************************/
  80:../Bmp.c      **** void BitmapPush (INT16U x, INT16U y, STRU_BITMAP Stru_Bitmap)
  81:../Bmp.c      **** {
 1609              		.loc 1 81 0
 1610              		.cfi_startproc
 1611              		@ Function supports interworking.
 1612              		@ args = 16, pretend = 8, frame = 16
 1613              		@ frame_needed = 1, uses_anonymous_args = 0
 1614 018c 0DC0A0E1 		mov	ip, sp
 1615              	.LCFI2:
 1616              		.cfi_def_cfa_register 12
 1617 0190 08D04DE2 		sub	sp, sp, #8
 1618 0194 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1619 0198 0CB04CE2 		sub	fp, ip, #12
 1620              		.cfi_offset 14, -16
 1621              		.cfi_offset 13, -20
 1622              		.cfi_offset 11, -24
 1623              	.LCFI3:
 1624              		.cfi_def_cfa 11, 12
 1625 019c 10D04DE2 		sub	sp, sp, #16
 1626 01a0 04C08BE2 		add	ip, fp, #4
 1627 01a4 0C008CE8 		stmia	ip, {r2, r3}
 1628 01a8 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 1629 01ac B8114BE1 		strh	r1, [fp, #-24]	@ movhi
  82:../Bmp.c      **** 	INT32U i, j;
  83:../Bmp.c      **** 
  84:../Bmp.c      **** 	ulMouseX = x; 
 1630              		.loc 1 84 0
 1631 01b0 34329FE5 		ldr	r3, .L14
 1632 01b4 B6215BE1 		ldrh	r2, [fp, #-22]	@ movhi
 1633 01b8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  85:../Bmp.c      **** 	ulMouseY = y;
 1634              		.loc 1 85 0
 1635 01bc 2C329FE5 		ldr	r3, .L14+4
 1636 01c0 B8215BE1 		ldrh	r2, [fp, #-24]	@ movhi
 1637 01c4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  86:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1638              		.loc 1 86 0
 1639 01c8 0030A0E3 		mov	r3, #0
 1640 01cc 10300BE5 		str	r3, [fp, #-16]
 1641 01d0 7D0000EA 		b	.L8
 1642              	.L13:
  87:../Bmp.c      **** 	{
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1643              		.loc 1 88 0
 1644 01d4 0030A0E3 		mov	r3, #0
 1645 01d8 14300BE5 		str	r3, [fp, #-20]
 1646 01dc 720000EA 		b	.L9
 1647              	.L12:
  89:../Bmp.c      **** 		{
  90:../Bmp.c      **** 			if ((x + j)%2)
 1648              		.loc 1 90 0
 1649 01e0 B6215BE1 		ldrh	r2, [fp, #-22]
 1650 01e4 14301BE5 		ldr	r3, [fp, #-20]
 1651 01e8 033082E0 		add	r3, r2, r3
 1652 01ec 013003E2 		and	r3, r3, #1
 1653 01f0 FF3003E2 		and	r3, r3, #255
 1654 01f4 000053E3 		cmp	r3, #0
 1655 01f8 4400000A 		beq	.L10
  91:../Bmp.c      **** 			{
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1656              		.loc 1 92 0
 1657 01fc 14301BE5 		ldr	r3, [fp, #-20]
 1658 0200 A3C0A0E1 		mov	ip, r3, lsr #1
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1659              		.loc 1 93 0
 1660 0204 B8215BE1 		ldrh	r2, [fp, #-24]
 1661 0208 10301BE5 		ldr	r3, [fp, #-16]
 1662 020c 032082E0 		add	r2, r2, r3
 1663 0210 0230A0E1 		mov	r3, r2
 1664 0214 0331A0E1 		mov	r3, r3, asl #2
 1665 0218 023083E0 		add	r3, r3, r2
 1666 021c 0333A0E1 		mov	r3, r3, asl #6
 1667 0220 A320A0E1 		mov	r2, r3, lsr #1
 1668 0224 B6115BE1 		ldrh	r1, [fp, #-22]
 1669 0228 14301BE5 		ldr	r3, [fp, #-20]
 1670 022c 033081E0 		add	r3, r1, r3
 1671 0230 A331A0E1 		mov	r3, r3, lsr #3
 1672 0234 0331A0E1 		mov	r3, r3, asl #2
 1673 0238 032082E0 		add	r2, r2, r3
 1674 023c B6115BE1 		ldrh	r1, [fp, #-22]
 1675 0240 14301BE5 		ldr	r3, [fp, #-20]
 1676 0244 033081E0 		add	r3, r1, r3
 1677 0248 073003E2 		and	r3, r3, #7
 1678 024c A330A0E1 		mov	r3, r3, lsr #1
 1679 0250 003063E2 		rsb	r3, r3, #0
 1680 0254 033082E0 		add	r3, r2, r3
 1681 0258 C33683E2 		add	r3, r3, #204472320
 1682 025c 033083E2 		add	r3, r3, #3
 1683 0260 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1684 0264 0332A0E1 		mov	r3, r3, asl #4
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1685              		.loc 1 92 0
 1686 0268 FF1003E2 		and	r1, r3, #255
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1687              		.loc 1 94 0
 1688 026c B8215BE1 		ldrh	r2, [fp, #-24]
 1689 0270 10301BE5 		ldr	r3, [fp, #-16]
 1690 0274 032082E0 		add	r2, r2, r3
 1691 0278 0230A0E1 		mov	r3, r2
 1692 027c 0331A0E1 		mov	r3, r3, asl #2
 1693 0280 023083E0 		add	r3, r3, r2
 1694 0284 0333A0E1 		mov	r3, r3, asl #6
 1695 0288 A320A0E1 		mov	r2, r3, lsr #1
 1696 028c B6015BE1 		ldrh	r0, [fp, #-22]
 1697 0290 14301BE5 		ldr	r3, [fp, #-20]
 1698 0294 033080E0 		add	r3, r0, r3
 1699 0298 013083E2 		add	r3, r3, #1
 1700 029c A331A0E1 		mov	r3, r3, lsr #3
 1701 02a0 0331A0E1 		mov	r3, r3, asl #2
 1702 02a4 032082E0 		add	r2, r2, r3
 1703 02a8 B6015BE1 		ldrh	r0, [fp, #-22]
 1704 02ac 14301BE5 		ldr	r3, [fp, #-20]
 1705 02b0 033080E0 		add	r3, r0, r3
 1706 02b4 013083E2 		add	r3, r3, #1
 1707 02b8 073003E2 		and	r3, r3, #7
 1708 02bc A330A0E1 		mov	r3, r3, lsr #1
 1709 02c0 003063E2 		rsb	r3, r3, #0
 1710 02c4 033082E0 		add	r3, r2, r3
 1711 02c8 C33683E2 		add	r3, r3, #204472320
 1712 02cc 033083E2 		add	r3, r3, #3
 1713 02d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1714              		.loc 1 92 0
 1715 02d4 2332A0E1 		mov	r3, r3, lsr #4
 1716 02d8 FF3003E2 		and	r3, r3, #255
 1717 02dc 033081E0 		add	r3, r1, r3
 1718 02e0 FF1003E2 		and	r1, r3, #255
 1719 02e4 08019FE5 		ldr	r0, .L14+8
 1720 02e8 10201BE5 		ldr	r2, [fp, #-16]
 1721 02ec 0230A0E1 		mov	r3, r2
 1722 02f0 8330A0E1 		mov	r3, r3, asl #1
 1723 02f4 023083E0 		add	r3, r3, r2
 1724 02f8 8330A0E1 		mov	r3, r3, asl #1
 1725 02fc 0C3083E0 		add	r3, r3, ip
 1726 0300 033080E0 		add	r3, r0, r3
 1727 0304 0120A0E1 		mov	r2, r1
 1728 0308 0020C3E5 		strb	r2, [r3, #0]
 1729 030c 230000EA 		b	.L11
 1730              	.L10:
  95:../Bmp.c      **** 			}
  96:../Bmp.c      **** 			else
  97:../Bmp.c      **** 			{
  98:../Bmp.c      **** 				ucCursorBackUp[i][j/2] = (*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 *
 1731              		.loc 1 98 0
 1732 0310 14301BE5 		ldr	r3, [fp, #-20]
 1733 0314 A3C0A0E1 		mov	ip, r3, lsr #1
 1734 0318 B8215BE1 		ldrh	r2, [fp, #-24]
 1735 031c 10301BE5 		ldr	r3, [fp, #-16]
 1736 0320 032082E0 		add	r2, r2, r3
 1737 0324 0230A0E1 		mov	r3, r2
 1738 0328 0331A0E1 		mov	r3, r3, asl #2
 1739 032c 023083E0 		add	r3, r3, r2
 1740 0330 0333A0E1 		mov	r3, r3, asl #6
 1741 0334 A320A0E1 		mov	r2, r3, lsr #1
 1742 0338 B6115BE1 		ldrh	r1, [fp, #-22]
 1743 033c 14301BE5 		ldr	r3, [fp, #-20]
 1744 0340 033081E0 		add	r3, r1, r3
 1745 0344 A331A0E1 		mov	r3, r3, lsr #3
 1746 0348 0331A0E1 		mov	r3, r3, asl #2
 1747 034c 032082E0 		add	r2, r2, r3
 1748 0350 B6115BE1 		ldrh	r1, [fp, #-22]
 1749 0354 14301BE5 		ldr	r3, [fp, #-20]
 1750 0358 033081E0 		add	r3, r1, r3
 1751 035c 073003E2 		and	r3, r3, #7
 1752 0360 A330A0E1 		mov	r3, r3, lsr #1
 1753 0364 003063E2 		rsb	r3, r3, #0
 1754 0368 033082E0 		add	r3, r2, r3
 1755 036c C33683E2 		add	r3, r3, #204472320
 1756 0370 033083E2 		add	r3, r3, #3
 1757 0374 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1758 0378 74009FE5 		ldr	r0, .L14+8
 1759 037c 10201BE5 		ldr	r2, [fp, #-16]
 1760 0380 0230A0E1 		mov	r3, r2
 1761 0384 8330A0E1 		mov	r3, r3, asl #1
 1762 0388 023083E0 		add	r3, r3, r2
 1763 038c 8330A0E1 		mov	r3, r3, asl #1
 1764 0390 0C3083E0 		add	r3, r3, ip
 1765 0394 033080E0 		add	r3, r0, r3
 1766 0398 0120A0E1 		mov	r2, r1
 1767 039c 0020C3E5 		strb	r2, [r3, #0]
 1768              	.L11:
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1769              		.loc 1 88 0
 1770 03a0 14301BE5 		ldr	r3, [fp, #-20]
 1771 03a4 023083E2 		add	r3, r3, #2
 1772 03a8 14300BE5 		str	r3, [fp, #-20]
 1773              	.L9:
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1774              		.loc 1 88 0 is_stmt 0 discriminator 1
 1775 03ac B630DBE1 		ldrh	r3, [fp, #6]
 1776 03b0 0320A0E1 		mov	r2, r3
 1777 03b4 14301BE5 		ldr	r3, [fp, #-20]
 1778 03b8 030052E1 		cmp	r2, r3
 1779 03bc 87FFFF8A 		bhi	.L12
  86:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1780              		.loc 1 86 0 is_stmt 1
 1781 03c0 10301BE5 		ldr	r3, [fp, #-16]
 1782 03c4 013083E2 		add	r3, r3, #1
 1783 03c8 10300BE5 		str	r3, [fp, #-16]
 1784              	.L8:
  86:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1785              		.loc 1 86 0 is_stmt 0 discriminator 1
 1786 03cc B830DBE1 		ldrh	r3, [fp, #8]
 1787 03d0 0320A0E1 		mov	r2, r3
 1788 03d4 10301BE5 		ldr	r3, [fp, #-16]
 1789 03d8 030052E1 		cmp	r2, r3
 1790 03dc 7CFFFF8A 		bhi	.L13
  99:../Bmp.c      **** 			}
 100:../Bmp.c      **** 		}
 101:../Bmp.c      **** 	}
 102:../Bmp.c      **** }
 1791              		.loc 1 102 0 is_stmt 1
 1792 03e0 0CD04BE2 		sub	sp, fp, #12
 1793 03e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1794 03e8 1EFF2FE1 		bx	lr
 1795              	.L15:
 1796              		.align	2
 1797              	.L14:
 1798 03ec 00000000 		.word	ulMouseX
 1799 03f0 00000000 		.word	ulMouseY
 1800 03f4 00000000 		.word	ucCursorBackUp
 1801              		.cfi_endproc
 1802              	.LFE1:
 1804              		.align	2
 1805              		.global	BitmapPop
 1807              	BitmapPop:
 1808              	.LFB2:
 103:../Bmp.c      **** 
 104:../Bmp.c      **** /*********************************************************************************************
 105:../Bmp.c      **** * name:		BitmapPop()
 106:../Bmp.c      **** * func:		pop bitmap data into LCD active buffer
 107:../Bmp.c      **** * para:		x,y -- pot's X-Y coordinate 
 108:../Bmp.c      **** *			Stru_Bitmap -- bitmap struct
 109:../Bmp.c      **** * ret:		none
 110:../Bmp.c      **** * modify:
 111:../Bmp.c      **** * comment:		
 112:../Bmp.c      **** *********************************************************************************************/
 113:../Bmp.c      **** void BitmapPop(INT16U x, INT16U y, STRU_BITMAP Stru_Bitmap)
 114:../Bmp.c      **** {
 1809              		.loc 1 114 0
 1810              		.cfi_startproc
 1811              		@ Function supports interworking.
 1812              		@ args = 16, pretend = 8, frame = 24
 1813              		@ frame_needed = 1, uses_anonymous_args = 0
 1814 03f8 0DC0A0E1 		mov	ip, sp
 1815              	.LCFI4:
 1816              		.cfi_def_cfa_register 12
 1817 03fc 08D04DE2 		sub	sp, sp, #8
 1818 0400 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 1819 0404 0CB04CE2 		sub	fp, ip, #12
 1820              		.cfi_offset 14, -16
 1821              		.cfi_offset 13, -20
 1822              		.cfi_offset 11, -24
 1823              		.cfi_offset 4, -28
 1824              	.LCFI5:
 1825              		.cfi_def_cfa 11, 12
 1826 0408 1CD04DE2 		sub	sp, sp, #28
 1827 040c 04C08BE2 		add	ip, fp, #4
 1828 0410 0C008CE8 		stmia	ip, {r2, r3}
 1829 0414 B6024BE1 		strh	r0, [fp, #-38]	@ movhi
 1830 0418 B8124BE1 		strh	r1, [fp, #-40]	@ movhi
 115:../Bmp.c      **** 	INT32U i, j;
 116:../Bmp.c      **** 	INT32U ulAddr, ulAddr1;
 117:../Bmp.c      **** 
 118:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1831              		.loc 1 118 0
 1832 041c 0030A0E3 		mov	r3, #0
 1833 0420 18300BE5 		str	r3, [fp, #-24]
 1834 0424 8D0000EA 		b	.L17
 1835              	.L22:
 119:../Bmp.c      **** 	{
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1836              		.loc 1 120 0
 1837 0428 0030A0E3 		mov	r3, #0
 1838 042c 1C300BE5 		str	r3, [fp, #-28]
 1839 0430 820000EA 		b	.L18
 1840              	.L21:
 121:../Bmp.c      **** 		{
 122:../Bmp.c      **** 			ulAddr = LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4 + 3 - ((x + j)%8) / 2;
 1841              		.loc 1 122 0
 1842 0434 B8225BE1 		ldrh	r2, [fp, #-40]
 1843 0438 18301BE5 		ldr	r3, [fp, #-24]
 1844 043c 032082E0 		add	r2, r2, r3
 1845 0440 0230A0E1 		mov	r3, r2
 1846 0444 0331A0E1 		mov	r3, r3, asl #2
 1847 0448 023083E0 		add	r3, r3, r2
 1848 044c 0333A0E1 		mov	r3, r3, asl #6
 1849 0450 A320A0E1 		mov	r2, r3, lsr #1
 1850 0454 B6125BE1 		ldrh	r1, [fp, #-38]
 1851 0458 1C301BE5 		ldr	r3, [fp, #-28]
 1852 045c 033081E0 		add	r3, r1, r3
 1853 0460 A331A0E1 		mov	r3, r3, lsr #3
 1854 0464 0331A0E1 		mov	r3, r3, asl #2
 1855 0468 032082E0 		add	r2, r2, r3
 1856 046c B6125BE1 		ldrh	r1, [fp, #-38]
 1857 0470 1C301BE5 		ldr	r3, [fp, #-28]
 1858 0474 033081E0 		add	r3, r1, r3
 1859 0478 073003E2 		and	r3, r3, #7
 1860 047c A330A0E1 		mov	r3, r3, lsr #1
 1861 0480 003063E2 		rsb	r3, r3, #0
 1862 0484 033082E0 		add	r3, r2, r3
 1863 0488 C33683E2 		add	r3, r3, #204472320
 1864 048c 033083E2 		add	r3, r3, #3
 1865 0490 20300BE5 		str	r3, [fp, #-32]
 123:../Bmp.c      **** 			ulAddr1 =LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j + 1) / 8 * 4 + 3 - ((x + j + 1)%8)
 1866              		.loc 1 123 0
 1867 0494 B8225BE1 		ldrh	r2, [fp, #-40]
 1868 0498 18301BE5 		ldr	r3, [fp, #-24]
 1869 049c 032082E0 		add	r2, r2, r3
 1870 04a0 0230A0E1 		mov	r3, r2
 1871 04a4 0331A0E1 		mov	r3, r3, asl #2
 1872 04a8 023083E0 		add	r3, r3, r2
 1873 04ac 0333A0E1 		mov	r3, r3, asl #6
 1874 04b0 A320A0E1 		mov	r2, r3, lsr #1
 1875 04b4 B6125BE1 		ldrh	r1, [fp, #-38]
 1876 04b8 1C301BE5 		ldr	r3, [fp, #-28]
 1877 04bc 033081E0 		add	r3, r1, r3
 1878 04c0 013083E2 		add	r3, r3, #1
 1879 04c4 A331A0E1 		mov	r3, r3, lsr #3
 1880 04c8 0331A0E1 		mov	r3, r3, asl #2
 1881 04cc 032082E0 		add	r2, r2, r3
 1882 04d0 B6125BE1 		ldrh	r1, [fp, #-38]
 1883 04d4 1C301BE5 		ldr	r3, [fp, #-28]
 1884 04d8 033081E0 		add	r3, r1, r3
 1885 04dc 013083E2 		add	r3, r3, #1
 1886 04e0 073003E2 		and	r3, r3, #7
 1887 04e4 A330A0E1 		mov	r3, r3, lsr #1
 1888 04e8 003063E2 		rsb	r3, r3, #0
 1889 04ec 033082E0 		add	r3, r2, r3
 1890 04f0 C33683E2 		add	r3, r3, #204472320
 1891 04f4 033083E2 		add	r3, r3, #3
 1892 04f8 24300BE5 		str	r3, [fp, #-36]
 124:../Bmp.c      **** 			if ((x + j)%2)
 1893              		.loc 1 124 0
 1894 04fc B6225BE1 		ldrh	r2, [fp, #-38]
 1895 0500 1C301BE5 		ldr	r3, [fp, #-28]
 1896 0504 033082E0 		add	r3, r2, r3
 1897 0508 013003E2 		and	r3, r3, #1
 1898 050c FF3003E2 		and	r3, r3, #255
 1899 0510 000053E3 		cmp	r3, #0
 1900 0514 3900000A 		beq	.L19
 125:../Bmp.c      **** 			{
 126:../Bmp.c      **** 				
 127:../Bmp.c      **** 				(*(INT8U*)ulAddr) &= 0xf0;
 1901              		.loc 1 127 0
 1902 0518 20301BE5 		ldr	r3, [fp, #-32]
 1903 051c 20201BE5 		ldr	r2, [fp, #-32]
 1904 0520 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 1905 0524 0F20C2E3 		bic	r2, r2, #15
 1906 0528 FF2002E2 		and	r2, r2, #255
 1907 052c 0020C3E5 		strb	r2, [r3, #0]
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 1908              		.loc 1 128 0
 1909 0530 20101BE5 		ldr	r1, [fp, #-32]
 1910 0534 20301BE5 		ldr	r3, [fp, #-32]
 1911 0538 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1912 053c FF0003E2 		and	r0, r3, #255
 1913 0540 1C301BE5 		ldr	r3, [fp, #-28]
 1914 0544 A340A0E1 		mov	r4, r3, lsr #1
 1915 0548 30C19FE5 		ldr	ip, .L23
 1916 054c 18201BE5 		ldr	r2, [fp, #-24]
 1917 0550 0230A0E1 		mov	r3, r2
 1918 0554 8330A0E1 		mov	r3, r3, asl #1
 1919 0558 023083E0 		add	r3, r3, r2
 1920 055c 8330A0E1 		mov	r3, r3, asl #1
 1921 0560 043083E0 		add	r3, r3, r4
 1922 0564 03308CE0 		add	r3, ip, r3
 1923 0568 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1924 056c 2332A0E1 		mov	r3, r3, lsr #4
 1925 0570 FF3003E2 		and	r3, r3, #255
 1926 0574 FF3003E2 		and	r3, r3, #255
 1927 0578 0020A0E1 		mov	r2, r0
 1928 057c 033082E1 		orr	r3, r2, r3
 1929 0580 FF3003E2 		and	r3, r3, #255
 1930 0584 FF3003E2 		and	r3, r3, #255
 1931 0588 0030C1E5 		strb	r3, [r1, #0]
 129:../Bmp.c      **** 				(*(INT8U*)ulAddr1) &= 0x0f;
 1932              		.loc 1 129 0
 1933 058c 24301BE5 		ldr	r3, [fp, #-36]
 1934 0590 24201BE5 		ldr	r2, [fp, #-36]
 1935 0594 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 1936 0598 0F2002E2 		and	r2, r2, #15
 1937 059c FF2002E2 		and	r2, r2, #255
 1938 05a0 0020C3E5 		strb	r2, [r3, #0]
 130:../Bmp.c      **** 				(*(INT8U*)ulAddr1) |= ((ucCursorBackUp[i][j/2] << 4) & 0xf0);
 1939              		.loc 1 130 0
 1940 05a4 24101BE5 		ldr	r1, [fp, #-36]
 1941 05a8 24301BE5 		ldr	r3, [fp, #-36]
 1942 05ac 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1943 05b0 FF0003E2 		and	r0, r3, #255
 1944 05b4 1C301BE5 		ldr	r3, [fp, #-28]
 1945 05b8 A340A0E1 		mov	r4, r3, lsr #1
 1946 05bc BCC09FE5 		ldr	ip, .L23
 1947 05c0 18201BE5 		ldr	r2, [fp, #-24]
 1948 05c4 0230A0E1 		mov	r3, r2
 1949 05c8 8330A0E1 		mov	r3, r3, asl #1
 1950 05cc 023083E0 		add	r3, r3, r2
 1951 05d0 8330A0E1 		mov	r3, r3, asl #1
 1952 05d4 043083E0 		add	r3, r3, r4
 1953 05d8 03308CE0 		add	r3, ip, r3
 1954 05dc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1955 05e0 0332A0E1 		mov	r3, r3, asl #4
 1956 05e4 FF3003E2 		and	r3, r3, #255
 1957 05e8 0020A0E1 		mov	r2, r0
 1958 05ec 033082E1 		orr	r3, r2, r3
 1959 05f0 FF3003E2 		and	r3, r3, #255
 1960 05f4 FF3003E2 		and	r3, r3, #255
 1961 05f8 0030C1E5 		strb	r3, [r1, #0]
 1962 05fc 0C0000EA 		b	.L20
 1963              	.L19:
 131:../Bmp.c      **** 			}
 132:../Bmp.c      **** 			else
 133:../Bmp.c      **** 			{
 134:../Bmp.c      **** 				(*(INT8U*)ulAddr) = ucCursorBackUp[i][j/2];
 1964              		.loc 1 134 0
 1965 0600 20101BE5 		ldr	r1, [fp, #-32]
 1966 0604 1C301BE5 		ldr	r3, [fp, #-28]
 1967 0608 A3C0A0E1 		mov	ip, r3, lsr #1
 1968 060c 6C009FE5 		ldr	r0, .L23
 1969 0610 18201BE5 		ldr	r2, [fp, #-24]
 1970 0614 0230A0E1 		mov	r3, r2
 1971 0618 8330A0E1 		mov	r3, r3, asl #1
 1972 061c 023083E0 		add	r3, r3, r2
 1973 0620 8330A0E1 		mov	r3, r3, asl #1
 1974 0624 0C3083E0 		add	r3, r3, ip
 1975 0628 033080E0 		add	r3, r0, r3
 1976 062c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1977 0630 0030C1E5 		strb	r3, [r1, #0]
 1978              	.L20:
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1979              		.loc 1 120 0
 1980 0634 1C301BE5 		ldr	r3, [fp, #-28]
 1981 0638 023083E2 		add	r3, r3, #2
 1982 063c 1C300BE5 		str	r3, [fp, #-28]
 1983              	.L18:
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1984              		.loc 1 120 0 is_stmt 0 discriminator 1
 1985 0640 B630DBE1 		ldrh	r3, [fp, #6]
 1986 0644 0320A0E1 		mov	r2, r3
 1987 0648 1C301BE5 		ldr	r3, [fp, #-28]
 1988 064c 030052E1 		cmp	r2, r3
 1989 0650 77FFFF8A 		bhi	.L21
 118:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1990              		.loc 1 118 0 is_stmt 1
 1991 0654 18301BE5 		ldr	r3, [fp, #-24]
 1992 0658 013083E2 		add	r3, r3, #1
 1993 065c 18300BE5 		str	r3, [fp, #-24]
 1994              	.L17:
 118:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1995              		.loc 1 118 0 is_stmt 0 discriminator 1
 1996 0660 B830DBE1 		ldrh	r3, [fp, #8]
 1997 0664 0320A0E1 		mov	r2, r3
 1998 0668 18301BE5 		ldr	r3, [fp, #-24]
 1999 066c 030052E1 		cmp	r2, r3
 2000 0670 6CFFFF8A 		bhi	.L22
 135:../Bmp.c      **** 			}
 136:../Bmp.c      **** 			
 137:../Bmp.c      **** 		}
 138:../Bmp.c      **** 	}
 139:../Bmp.c      **** }
 2001              		.loc 1 139 0 is_stmt 1
 2002 0674 10D04BE2 		sub	sp, fp, #16
 2003 0678 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 2004 067c 1EFF2FE1 		bx	lr
 2005              	.L24:
 2006              		.align	2
 2007              	.L23:
 2008 0680 00000000 		.word	ucCursorBackUp
 2009              		.cfi_endproc
 2010              	.LFE2:
 2012              		.align	2
 2013              		.global	CursorInit
 2015              	CursorInit:
 2016              	.LFB3:
 140:../Bmp.c      **** 
 141:../Bmp.c      **** /*********************************************************************************************
 142:../Bmp.c      **** * name:		CursorInit()
 143:../Bmp.c      **** * func:		cursor init
 144:../Bmp.c      **** * para:		none
 145:../Bmp.c      **** * ret:		none
 146:../Bmp.c      **** * modify:
 147:../Bmp.c      **** * comment:		
 148:../Bmp.c      **** *********************************************************************************************/
 149:../Bmp.c      **** void CursorInit(void)
 150:../Bmp.c      **** {
 2017              		.loc 1 150 0
 2018              		.cfi_startproc
 2019              		@ Function supports interworking.
 2020              		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 1, uses_anonymous_args = 0
 2022 0684 0DC0A0E1 		mov	ip, sp
 2023              	.LCFI6:
 2024              		.cfi_def_cfa_register 12
 2025 0688 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2026 068c 04B04CE2 		sub	fp, ip, #4
 2027              		.cfi_offset 14, -8
 2028              		.cfi_offset 13, -12
 2029              		.cfi_offset 11, -16
 2030              	.LCFI7:
 2031              		.cfi_def_cfa 11, 4
 151:../Bmp.c      **** 	ulMouseX = 0;
 2032              		.loc 1 151 0
 2033 0690 38309FE5 		ldr	r3, .L26
 2034 0694 0020A0E3 		mov	r2, #0
 2035 0698 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 152:../Bmp.c      **** 	ulMouseY = 0;
 2036              		.loc 1 152 0
 2037 069c 30309FE5 		ldr	r3, .L26+4
 2038 06a0 0020A0E3 		mov	r2, #0
 2039 06a4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 153:../Bmp.c      **** 	CursorView(ulMouseX, ulMouseY);
 2040              		.loc 1 153 0
 2041 06a8 20309FE5 		ldr	r3, .L26
 2042 06ac B020D3E1 		ldrh	r2, [r3, #0]
 2043 06b0 1C309FE5 		ldr	r3, .L26+4
 2044 06b4 B030D3E1 		ldrh	r3, [r3, #0]
 2045 06b8 0200A0E1 		mov	r0, r2
 2046 06bc 0310A0E1 		mov	r1, r3
 2047 06c0 FEFFFFEB 		bl	CursorView
 154:../Bmp.c      **** }
 2048              		.loc 1 154 0
 2049 06c4 0CD04BE2 		sub	sp, fp, #12
 2050 06c8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2051 06cc 1EFF2FE1 		bx	lr
 2052              	.L27:
 2053              		.align	2
 2054              	.L26:
 2055 06d0 00000000 		.word	ulMouseX
 2056 06d4 00000000 		.word	ulMouseY
 2057              		.cfi_endproc
 2058              	.LFE3:
 2060              		.align	2
 2061              		.global	CursorPush
 2063              	CursorPush:
 2064              	.LFB4:
 155:../Bmp.c      **** 
 156:../Bmp.c      **** /*********************************************************************************************
 157:../Bmp.c      **** * name:		CursorPush()
 158:../Bmp.c      **** * func:		cursor push
 159:../Bmp.c      **** * para:		none
 160:../Bmp.c      **** * ret:		none
 161:../Bmp.c      **** * modify:
 162:../Bmp.c      **** * comment:		
 163:../Bmp.c      **** *********************************************************************************************/
 164:../Bmp.c      **** void CursorPush(INT16U x, INT16U y)
 165:../Bmp.c      **** {
 2065              		.loc 1 165 0
 2066              		.cfi_startproc
 2067              		@ Function supports interworking.
 2068              		@ args = 0, pretend = 0, frame = 8
 2069              		@ frame_needed = 1, uses_anonymous_args = 0
 2070 06d8 0DC0A0E1 		mov	ip, sp
 2071              	.LCFI8:
 2072              		.cfi_def_cfa_register 12
 2073 06dc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2074 06e0 04B04CE2 		sub	fp, ip, #4
 2075              		.cfi_offset 14, -8
 2076              		.cfi_offset 13, -12
 2077              		.cfi_offset 11, -16
 2078              	.LCFI9:
 2079              		.cfi_def_cfa 11, 4
 2080 06e4 10D04DE2 		sub	sp, sp, #16
 2081 06e8 0020A0E1 		mov	r2, r0
 2082 06ec 0130A0E1 		mov	r3, r1
 2083 06f0 BE204BE1 		strh	r2, [fp, #-14]	@ movhi
 2084 06f4 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 166:../Bmp.c      **** 	BitmapPush(x, y, Stru_Bitmap_gbMouse);
 2085              		.loc 1 166 0
 2086 06f8 BEE05BE1 		ldrh	lr, [fp, #-14]
 2087 06fc B0C15BE1 		ldrh	ip, [fp, #-16]
 2088 0700 28309FE5 		ldr	r3, .L29
 2089 0704 0D20A0E1 		mov	r2, sp
 2090 0708 081083E2 		add	r1, r3, #8
 2091 070c 030091E8 		ldmia	r1, {r0, r1}
 2092 0710 030082E8 		stmia	r2, {r0, r1}
 2093 0714 0C0093E8 		ldmia	r3, {r2, r3}
 2094 0718 0E00A0E1 		mov	r0, lr
 2095 071c 0C10A0E1 		mov	r1, ip
 2096 0720 FEFFFFEB 		bl	BitmapPush
 167:../Bmp.c      **** }
 2097              		.loc 1 167 0
 2098 0724 0CD04BE2 		sub	sp, fp, #12
 2099 0728 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2100 072c 1EFF2FE1 		bx	lr
 2101              	.L30:
 2102              		.align	2
 2103              	.L29:
 2104 0730 00000000 		.word	Stru_Bitmap_gbMouse
 2105              		.cfi_endproc
 2106              	.LFE4:
 2108              		.align	2
 2109              		.global	CursorPop
 2111              	CursorPop:
 2112              	.LFB5:
 168:../Bmp.c      **** 
 169:../Bmp.c      **** /*********************************************************************************************
 170:../Bmp.c      **** * name:		CursorPop()
 171:../Bmp.c      **** * func:		cursor pop
 172:../Bmp.c      **** * para:		none
 173:../Bmp.c      **** * ret:		none
 174:../Bmp.c      **** * modify:
 175:../Bmp.c      **** * comment:		
 176:../Bmp.c      **** *********************************************************************************************/
 177:../Bmp.c      **** void CursorPop()
 178:../Bmp.c      **** {
 2113              		.loc 1 178 0
 2114              		.cfi_startproc
 2115              		@ Function supports interworking.
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 1, uses_anonymous_args = 0
 2118 0734 0DC0A0E1 		mov	ip, sp
 2119              	.LCFI10:
 2120              		.cfi_def_cfa_register 12
 2121 0738 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2122 073c 04B04CE2 		sub	fp, ip, #4
 2123              		.cfi_offset 14, -8
 2124              		.cfi_offset 13, -12
 2125              		.cfi_offset 11, -16
 2126              	.LCFI11:
 2127              		.cfi_def_cfa 11, 4
 2128 0740 08D04DE2 		sub	sp, sp, #8
 179:../Bmp.c      **** 	BitmapPop(ulMouseX, ulMouseY, Stru_Bitmap_gbMouse);
 2129              		.loc 1 179 0
 2130 0744 38309FE5 		ldr	r3, .L32
 2131 0748 B0E0D3E1 		ldrh	lr, [r3, #0]
 2132 074c 34309FE5 		ldr	r3, .L32+4
 2133 0750 B0C0D3E1 		ldrh	ip, [r3, #0]
 2134 0754 30309FE5 		ldr	r3, .L32+8
 2135 0758 0D20A0E1 		mov	r2, sp
 2136 075c 081083E2 		add	r1, r3, #8
 2137 0760 030091E8 		ldmia	r1, {r0, r1}
 2138 0764 030082E8 		stmia	r2, {r0, r1}
 2139 0768 0C0093E8 		ldmia	r3, {r2, r3}
 2140 076c 0E00A0E1 		mov	r0, lr
 2141 0770 0C10A0E1 		mov	r1, ip
 2142 0774 FEFFFFEB 		bl	BitmapPop
 180:../Bmp.c      **** }
 2143              		.loc 1 180 0
 2144 0778 0CD04BE2 		sub	sp, fp, #12
 2145 077c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2146 0780 1EFF2FE1 		bx	lr
 2147              	.L33:
 2148              		.align	2
 2149              	.L32:
 2150 0784 00000000 		.word	ulMouseX
 2151 0788 00000000 		.word	ulMouseY
 2152 078c 00000000 		.word	Stru_Bitmap_gbMouse
 2153              		.cfi_endproc
 2154              	.LFE5:
 2156              		.align	2
 2157              		.global	CursorView
 2159              	CursorView:
 2160              	.LFB6:
 181:../Bmp.c      **** 
 182:../Bmp.c      **** /*********************************************************************************************
 183:../Bmp.c      **** * name:		CursorView()
 184:../Bmp.c      **** * func:		cursor display
 185:../Bmp.c      **** * para:		none
 186:../Bmp.c      **** * ret:		none
 187:../Bmp.c      **** * modify:
 188:../Bmp.c      **** * comment:		
 189:../Bmp.c      **** *********************************************************************************************/
 190:../Bmp.c      **** void CursorView(INT16U x, INT16U y)
 191:../Bmp.c      **** {
 2161              		.loc 1 191 0
 2162              		.cfi_startproc
 2163              		@ Function supports interworking.
 2164              		@ args = 0, pretend = 0, frame = 8
 2165              		@ frame_needed = 1, uses_anonymous_args = 0
 2166 0790 0DC0A0E1 		mov	ip, sp
 2167              	.LCFI12:
 2168              		.cfi_def_cfa_register 12
 2169 0794 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2170 0798 04B04CE2 		sub	fp, ip, #4
 2171              		.cfi_offset 14, -8
 2172              		.cfi_offset 13, -12
 2173              		.cfi_offset 11, -16
 2174              	.LCFI13:
 2175              		.cfi_def_cfa 11, 4
 2176 079c 10D04DE2 		sub	sp, sp, #16
 2177 07a0 0020A0E1 		mov	r2, r0
 2178 07a4 0130A0E1 		mov	r3, r1
 2179 07a8 BE204BE1 		strh	r2, [fp, #-14]	@ movhi
 2180 07ac B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 192:../Bmp.c      **** 	CursorPush(x, y);
 2181              		.loc 1 192 0
 2182 07b0 BE205BE1 		ldrh	r2, [fp, #-14]
 2183 07b4 B0315BE1 		ldrh	r3, [fp, #-16]
 2184 07b8 0200A0E1 		mov	r0, r2
 2185 07bc 0310A0E1 		mov	r1, r3
 2186 07c0 FEFFFFEB 		bl	CursorPush
 193:../Bmp.c      **** 	BitmapView(x, y, Stru_Bitmap_gbMouse);
 2187              		.loc 1 193 0
 2188 07c4 BEE05BE1 		ldrh	lr, [fp, #-14]
 2189 07c8 B0C15BE1 		ldrh	ip, [fp, #-16]
 2190 07cc 28309FE5 		ldr	r3, .L35
 2191 07d0 0D20A0E1 		mov	r2, sp
 2192 07d4 081083E2 		add	r1, r3, #8
 2193 07d8 030091E8 		ldmia	r1, {r0, r1}
 2194 07dc 030082E8 		stmia	r2, {r0, r1}
 2195 07e0 0C0093E8 		ldmia	r3, {r2, r3}
 2196 07e4 0E00A0E1 		mov	r0, lr
 2197 07e8 0C10A0E1 		mov	r1, ip
 2198 07ec FEFFFFEB 		bl	BitmapView
 194:../Bmp.c      **** }
 2199              		.loc 1 194 0
 2200 07f0 0CD04BE2 		sub	sp, fp, #12
 2201 07f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2202 07f8 1EFF2FE1 		bx	lr
 2203              	.L36:
 2204              		.align	2
 2205              	.L35:
 2206 07fc 00000000 		.word	Stru_Bitmap_gbMouse
 2207              		.cfi_endproc
 2208              	.LFE6:
 2210              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 Bmp.c
                            *COM*:00000004 transferencia_completa
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:1213   .rodata:00000000 ucMouseMap
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:1210   .rodata:00000000 $d
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:1459   .data:00000000 Stru_Bitmap_gbMouse
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:1456   .data:00000000 $d
                            *COM*:00000002 ulMouseX
                            *COM*:00000002 ulMouseY
                            *COM*:00000078 ucCursorBackUp
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:1471   .text:00000000 $a
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:1474   .text:00000000 BitmapView
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:1607   .text:0000018c BitmapPush
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:1798   .text:000003ec $d
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:1804   .text:000003f8 $a
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:1807   .text:000003f8 BitmapPop
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2008   .text:00000680 $d
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2012   .text:00000684 $a
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2015   .text:00000684 CursorInit
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2159   .text:00000790 CursorView
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2055   .text:000006d0 $d
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2060   .text:000006d8 $a
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2063   .text:000006d8 CursorPush
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2104   .text:00000730 $d
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2108   .text:00000734 $a
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2111   .text:00000734 CursorPop
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2150   .text:00000784 $d
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2156   .text:00000790 $a
C:\Users\a764429\AppData\Local\Temp\cc7vnI9l.s:2206   .text:000007fc $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
